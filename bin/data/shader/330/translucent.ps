#version 330 core
out vec4 frag_color;

in vec4 out_position;
in vec4 out_color;
in vec3 out_normal;
in vec2 out_texcoord;

uniform sampler2D in_texture;

vec4 cubic(float v){
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 sample_alpha(vec4 sample) {
    float alpha = sample.a;
    return vec4(sample.rgb*alpha, alpha);
}

vec4 textureBicubic(sampler2D sampler, vec2 texCoords){

    vec2 texSize = textureSize(in_texture, 0);
    vec2 invTexSize = 1.0 / texSize;

    texCoords = texCoords * texSize - 0.5;


    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;

    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;

    offset *= invTexSize.xxyy;

    vec4 sample0 = sample_alpha(texture(sampler, offset.xz));
    vec4 sample1 = sample_alpha(texture(sampler, offset.yz));
    vec4 sample2 = sample_alpha(texture(sampler, offset.xw));
    vec4 sample3 = sample_alpha(texture(sampler, offset.yw));

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
       mix(sample3, sample2, sx), mix(sample1, sample0, sx)
    , sy);
}

void main()
{
	frag_color = texture(in_texture, out_texcoord);
	frag_color = out_color*frag_color;
}